// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// correlationmatrixcpp
Eigen::MatrixXd correlationmatrixcpp(const Eigen::MatrixXd& G1, const double tau, const double tol);
RcppExport SEXP _npfixedcomp2_correlationmatrixcpp(SEXP G1SEXP, SEXP tauSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type G1(G1SEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(correlationmatrixcpp(G1, tau, tol));
    return rcpp_result_gen;
END_RCPP
}
// pnnlssum
Eigen::VectorXd pnnlssum(const Eigen::MatrixXd& A, const Eigen::VectorXd& b, const double& sum);
RcppExport SEXP _npfixedcomp2_pnnlssum(SEXP ASEXP, SEXP bSEXP, SEXP sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type sum(sumSEXP);
    rcpp_result_gen = Rcpp::wrap(pnnlssum(A, b, sum));
    return rcpp_result_gen;
END_RCPP
}
// pnnqp
Eigen::VectorXd pnnqp(const Eigen::MatrixXd& q, const Eigen::VectorXd& p, const double& sum);
RcppExport SEXP _npfixedcomp2_pnnqp(SEXP qSEXP, SEXP pSEXP, SEXP sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type sum(sumSEXP);
    rcpp_result_gen = Rcpp::wrap(pnnqp(q, p, sum));
    return rcpp_result_gen;
END_RCPP
}
// dnpnorm
Eigen::VectorXd dnpnorm(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const Eigen::VectorXd& pi0, const double& stdev, const bool& lg);
RcppExport SEXP _npfixedcomp2_dnpnorm(SEXP xSEXP, SEXP mu0SEXP, SEXP pi0SEXP, SEXP stdevSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dnpnorm(x, mu0, pi0, stdev, lg));
    return rcpp_result_gen;
END_RCPP
}
// dnormarray_
Eigen::MatrixXd dnormarray_(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const double& stdev, const bool& lg);
RcppExport SEXP _npfixedcomp2_dnormarray_(SEXP xSEXP, SEXP mu0SEXP, SEXP stdevSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dnormarray_(x, mu0, stdev, lg));
    return rcpp_result_gen;
END_RCPP
}
// pnpnorm
Eigen::VectorXd pnpnorm(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const Eigen::VectorXd& pi0, const double& stdev, const bool& lt, const bool& lg);
RcppExport SEXP _npfixedcomp2_pnpnorm(SEXP xSEXP, SEXP mu0SEXP, SEXP pi0SEXP, SEXP stdevSEXP, SEXP ltSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(pnpnorm(x, mu0, pi0, stdev, lt, lg));
    return rcpp_result_gen;
END_RCPP
}
// pnormarray_
Eigen::MatrixXd pnormarray_(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const double& stdev, const bool& lt, const bool& lg);
RcppExport SEXP _npfixedcomp2_pnormarray_(SEXP xSEXP, SEXP mu0SEXP, SEXP stdevSEXP, SEXP ltSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(pnormarray_(x, mu0, stdev, lt, lg));
    return rcpp_result_gen;
END_RCPP
}
// dnpnormc
Eigen::VectorXd dnpnormc(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const Eigen::VectorXd& pi0, const double& n, const bool& lg);
RcppExport SEXP _npfixedcomp2_dnpnormc(SEXP xSEXP, SEXP mu0SEXP, SEXP pi0SEXP, SEXP nSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< const double& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dnpnormc(x, mu0, pi0, n, lg));
    return rcpp_result_gen;
END_RCPP
}
// dnormcarray_
Eigen::MatrixXd dnormcarray_(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const double& n, const bool& lg);
RcppExport SEXP _npfixedcomp2_dnormcarray_(SEXP xSEXP, SEXP mu0SEXP, SEXP nSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dnormcarray_(x, mu0, n, lg));
    return rcpp_result_gen;
END_RCPP
}
// dnpt
Eigen::VectorXd dnpt(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const Eigen::VectorXd& pi0, const double& df, const bool& lg);
RcppExport SEXP _npfixedcomp2_dnpt(SEXP xSEXP, SEXP mu0SEXP, SEXP pi0SEXP, SEXP dfSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< const double& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dnpt(x, mu0, pi0, df, lg));
    return rcpp_result_gen;
END_RCPP
}
// dtarray_
Eigen::MatrixXd dtarray_(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const double& df, const bool& lg);
RcppExport SEXP _npfixedcomp2_dtarray_(SEXP xSEXP, SEXP mu0SEXP, SEXP dfSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dtarray_(x, mu0, df, lg));
    return rcpp_result_gen;
END_RCPP
}
// dnpdiscnorm
Eigen::VectorXd dnpdiscnorm(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const Eigen::VectorXd& pi0, const double& stdev, const double& h, const bool& lg);
RcppExport SEXP _npfixedcomp2_dnpdiscnorm(SEXP xSEXP, SEXP mu0SEXP, SEXP pi0SEXP, SEXP stdevSEXP, SEXP hSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dnpdiscnorm(x, mu0, pi0, stdev, h, lg));
    return rcpp_result_gen;
END_RCPP
}
// ddiscnormarray_
Eigen::MatrixXd ddiscnormarray_(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const double& stdev, const double& h, const bool& lg);
RcppExport SEXP _npfixedcomp2_ddiscnormarray_(SEXP xSEXP, SEXP mu0SEXP, SEXP stdevSEXP, SEXP hSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(ddiscnormarray_(x, mu0, stdev, h, lg));
    return rcpp_result_gen;
END_RCPP
}
// pnpdiscnorm
Eigen::VectorXd pnpdiscnorm(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const Eigen::VectorXd& pi0, const double& stdev, const double& h, const bool& lt, const bool& lg);
RcppExport SEXP _npfixedcomp2_pnpdiscnorm(SEXP xSEXP, SEXP mu0SEXP, SEXP pi0SEXP, SEXP stdevSEXP, SEXP hSEXP, SEXP ltSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(pnpdiscnorm(x, mu0, pi0, stdev, h, lt, lg));
    return rcpp_result_gen;
END_RCPP
}
// pdiscnormarray_
Eigen::MatrixXd pdiscnormarray_(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const double& stdev, const double& h, const bool& lt, const bool& lg);
RcppExport SEXP _npfixedcomp2_pdiscnormarray_(SEXP xSEXP, SEXP mu0SEXP, SEXP stdevSEXP, SEXP hSEXP, SEXP ltSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(pdiscnormarray_(x, mu0, stdev, h, lt, lg));
    return rcpp_result_gen;
END_RCPP
}
// dnppois
Eigen::VectorXd dnppois(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const Eigen::VectorXd& pi0, const double& stdev, const bool& lg);
RcppExport SEXP _npfixedcomp2_dnppois(SEXP xSEXP, SEXP mu0SEXP, SEXP pi0SEXP, SEXP stdevSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dnppois(x, mu0, pi0, stdev, lg));
    return rcpp_result_gen;
END_RCPP
}
// dpoisarray_
Eigen::MatrixXd dpoisarray_(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const double& stdev, const bool& lg);
RcppExport SEXP _npfixedcomp2_dpoisarray_(SEXP xSEXP, SEXP mu0SEXP, SEXP stdevSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dpoisarray_(x, mu0, stdev, lg));
    return rcpp_result_gen;
END_RCPP
}
// pnppois
Eigen::VectorXd pnppois(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const Eigen::VectorXd& pi0, const double& stdev, const bool& lt, const bool& lg);
RcppExport SEXP _npfixedcomp2_pnppois(SEXP xSEXP, SEXP mu0SEXP, SEXP pi0SEXP, SEXP stdevSEXP, SEXP ltSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(pnppois(x, mu0, pi0, stdev, lt, lg));
    return rcpp_result_gen;
END_RCPP
}
// ppoisarray_
Eigen::MatrixXd ppoisarray_(const Eigen::VectorXd& x, const Eigen::VectorXd& mu0, const double& stdev, const bool& lt, const bool& lg);
RcppExport SEXP _npfixedcomp2_ppoisarray_(SEXP xSEXP, SEXP mu0SEXP, SEXP stdevSEXP, SEXP ltSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(ppoisarray_(x, mu0, stdev, lt, lg));
    return rcpp_result_gen;
END_RCPP
}
// log1mexp_
Eigen::VectorXd log1mexp_(const Eigen::VectorXd& x);
RcppExport SEXP _npfixedcomp2_log1mexp_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log1mexp_(x));
    return rcpp_result_gen;
END_RCPP
}
// logspaceadd_
Eigen::VectorXd logspaceadd_(const Eigen::VectorXd& lx, const Eigen::VectorXd& ly);
RcppExport SEXP _npfixedcomp2_logspaceadd_(SEXP lxSEXP, SEXP lySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ly(lySEXP);
    rcpp_result_gen = Rcpp::wrap(logspaceadd_(lx, ly));
    return rcpp_result_gen;
END_RCPP
}
// npnormad_
Rcpp::List npnormad_(const Eigen::VectorXd& data, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& maxit, const int& verbose);
RcppExport SEXP _npfixedcomp2_npnormad_(SEXP dataSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(npnormad_(data, mu0fixed, pi0fixed, beta, initpt, initpr, gridpoints, tol, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// estpi0npnormad_
Rcpp::List estpi0npnormad_(const Eigen::VectorXd& data, const double& beta, const double& val, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& verbose);
RcppExport SEXP _npfixedcomp2_estpi0npnormad_(SEXP dataSEXP, SEXP betaSEXP, SEXP valSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estpi0npnormad_(data, beta, val, initpt, initpr, gridpoints, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// gfnpnormad
Eigen::VectorXd gfnpnormad(const Eigen::VectorXd& data, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const Eigen::VectorXd& mu0, const Eigen::VectorXd& pi0, const Eigen::VectorXd& gridpoints);
RcppExport SEXP _npfixedcomp2_gfnpnormad(SEXP dataSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP mu0SEXP, SEXP pi0SEXP, SEXP gridpointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    rcpp_result_gen = Rcpp::wrap(gfnpnormad(data, mu0fixed, pi0fixed, beta, mu0, pi0, gridpoints));
    return rcpp_result_gen;
END_RCPP
}
// npnormadw_
Rcpp::List npnormadw_(const Eigen::VectorXd& data, const Eigen::VectorXd& weights, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const double& h, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& maxit, const int& verbose);
RcppExport SEXP _npfixedcomp2_npnormadw_(SEXP dataSEXP, SEXP weightsSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP hSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(npnormadw_(data, weights, mu0fixed, pi0fixed, beta, h, initpt, initpr, gridpoints, tol, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// estpi0npnormadw_
Rcpp::List estpi0npnormadw_(const Eigen::VectorXd& data, const Eigen::VectorXd& weights, const double& beta, const double& h, const double& val, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& verbose);
RcppExport SEXP _npfixedcomp2_estpi0npnormadw_(SEXP dataSEXP, SEXP weightsSEXP, SEXP betaSEXP, SEXP hSEXP, SEXP valSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estpi0npnormadw_(data, weights, beta, h, val, initpt, initpr, gridpoints, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// npnormcll_
Rcpp::List npnormcll_(const Eigen::VectorXd& data, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& maxit, const int& verbose);
RcppExport SEXP _npfixedcomp2_npnormcll_(SEXP dataSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(npnormcll_(data, mu0fixed, pi0fixed, beta, initpt, initpr, gridpoints, tol, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// estpi0npnormcll_
Rcpp::List estpi0npnormcll_(const Eigen::VectorXd& data, const double& beta, const double& val, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& verbose);
RcppExport SEXP _npfixedcomp2_estpi0npnormcll_(SEXP dataSEXP, SEXP betaSEXP, SEXP valSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estpi0npnormcll_(data, beta, val, initpt, initpr, gridpoints, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// npnormcvm_
Rcpp::List npnormcvm_(const Eigen::VectorXd& data, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& maxit, const int& verbose);
RcppExport SEXP _npfixedcomp2_npnormcvm_(SEXP dataSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(npnormcvm_(data, mu0fixed, pi0fixed, beta, initpt, initpr, gridpoints, tol, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// estpi0npnormcvm_
Rcpp::List estpi0npnormcvm_(const Eigen::VectorXd& data, const double& beta, const double& val, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& verbose);
RcppExport SEXP _npfixedcomp2_estpi0npnormcvm_(SEXP dataSEXP, SEXP betaSEXP, SEXP valSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estpi0npnormcvm_(data, beta, val, initpt, initpr, gridpoints, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// gfnpnormcvm
Eigen::VectorXd gfnpnormcvm(const Eigen::VectorXd& data, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const Eigen::VectorXd& mu0, const Eigen::VectorXd& pi0, const Eigen::VectorXd& gridpoints);
RcppExport SEXP _npfixedcomp2_gfnpnormcvm(SEXP dataSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP mu0SEXP, SEXP pi0SEXP, SEXP gridpointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    rcpp_result_gen = Rcpp::wrap(gfnpnormcvm(data, mu0fixed, pi0fixed, beta, mu0, pi0, gridpoints));
    return rcpp_result_gen;
END_RCPP
}
// npnormcvmw_
Rcpp::List npnormcvmw_(const Eigen::VectorXd& data, const Eigen::VectorXd& weights, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const double& h, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& maxit, const int& verbose);
RcppExport SEXP _npfixedcomp2_npnormcvmw_(SEXP dataSEXP, SEXP weightsSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP hSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(npnormcvmw_(data, weights, mu0fixed, pi0fixed, beta, h, initpt, initpr, gridpoints, tol, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// estpi0npnormcvmw_
Rcpp::List estpi0npnormcvmw_(const Eigen::VectorXd& data, const Eigen::VectorXd& weights, const double& beta, const double& h, const double& val, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& verbose);
RcppExport SEXP _npfixedcomp2_estpi0npnormcvmw_(SEXP dataSEXP, SEXP weightsSEXP, SEXP betaSEXP, SEXP hSEXP, SEXP valSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estpi0npnormcvmw_(data, weights, beta, h, val, initpt, initpr, gridpoints, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// npnormll_
Rcpp::List npnormll_(const Eigen::VectorXd& data, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& maxit, const int& verbose);
RcppExport SEXP _npfixedcomp2_npnormll_(SEXP dataSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(npnormll_(data, mu0fixed, pi0fixed, beta, initpt, initpr, gridpoints, tol, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// estpi0npnormll_
Rcpp::List estpi0npnormll_(const Eigen::VectorXd& data, const double& beta, const double& val, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& verbose);
RcppExport SEXP _npfixedcomp2_estpi0npnormll_(SEXP dataSEXP, SEXP betaSEXP, SEXP valSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estpi0npnormll_(data, beta, val, initpt, initpr, gridpoints, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// npnormllw_
Rcpp::List npnormllw_(const Eigen::VectorXd& data, const Eigen::VectorXd& weights, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const double& h, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& maxit, const int& verbose);
RcppExport SEXP _npfixedcomp2_npnormllw_(SEXP dataSEXP, SEXP weightsSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP hSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(npnormllw_(data, weights, mu0fixed, pi0fixed, beta, h, initpt, initpr, gridpoints, tol, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// estpi0npnormllw_
Rcpp::List estpi0npnormllw_(const Eigen::VectorXd& data, const Eigen::VectorXd& weights, const double& beta, const double& h, const double& val, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& verbose);
RcppExport SEXP _npfixedcomp2_estpi0npnormllw_(SEXP dataSEXP, SEXP weightsSEXP, SEXP betaSEXP, SEXP hSEXP, SEXP valSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estpi0npnormllw_(data, weights, beta, h, val, initpt, initpr, gridpoints, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// nppoisll_
Rcpp::List nppoisll_(const Eigen::VectorXd& data, const Eigen::VectorXd& weights, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& maxit, const int& verbose);
RcppExport SEXP _npfixedcomp2_nppoisll_(SEXP dataSEXP, SEXP weightsSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(nppoisll_(data, weights, mu0fixed, pi0fixed, beta, initpt, initpr, gridpoints, tol, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// estpi0nppoisll_
Rcpp::List estpi0nppoisll_(const Eigen::VectorXd& data, const Eigen::VectorXd& weights, const double& beta, const double& val, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& verbose);
RcppExport SEXP _npfixedcomp2_estpi0nppoisll_(SEXP dataSEXP, SEXP weightsSEXP, SEXP betaSEXP, SEXP valSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estpi0nppoisll_(data, weights, beta, val, initpt, initpr, gridpoints, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// nptll_
Rcpp::List nptll_(const Eigen::VectorXd& data, const Eigen::VectorXd& mu0fixed, const Eigen::VectorXd& pi0fixed, const double& beta, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& maxit, const int& verbose);
RcppExport SEXP _npfixedcomp2_nptll_(SEXP dataSEXP, SEXP mu0fixedSEXP, SEXP pi0fixedSEXP, SEXP betaSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0fixed(mu0fixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pi0fixed(pi0fixedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(nptll_(data, mu0fixed, pi0fixed, beta, initpt, initpr, gridpoints, tol, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// estpi0nptll_
Rcpp::List estpi0nptll_(const Eigen::VectorXd& data, const double& beta, const double& val, const Eigen::VectorXd& initpt, const Eigen::VectorXd& initpr, const Eigen::VectorXd& gridpoints, const double& tol, const int& verbose);
RcppExport SEXP _npfixedcomp2_estpi0nptll_(SEXP dataSEXP, SEXP betaSEXP, SEXP valSEXP, SEXP initptSEXP, SEXP initprSEXP, SEXP gridpointsSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpt(initptSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type initpr(initprSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estpi0nptll_(data, beta, val, initpt, initpr, gridpoints, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_npfixedcomp2_correlationmatrixcpp", (DL_FUNC) &_npfixedcomp2_correlationmatrixcpp, 3},
    {"_npfixedcomp2_pnnlssum", (DL_FUNC) &_npfixedcomp2_pnnlssum, 3},
    {"_npfixedcomp2_pnnqp", (DL_FUNC) &_npfixedcomp2_pnnqp, 3},
    {"_npfixedcomp2_dnpnorm", (DL_FUNC) &_npfixedcomp2_dnpnorm, 5},
    {"_npfixedcomp2_dnormarray_", (DL_FUNC) &_npfixedcomp2_dnormarray_, 4},
    {"_npfixedcomp2_pnpnorm", (DL_FUNC) &_npfixedcomp2_pnpnorm, 6},
    {"_npfixedcomp2_pnormarray_", (DL_FUNC) &_npfixedcomp2_pnormarray_, 5},
    {"_npfixedcomp2_dnpnormc", (DL_FUNC) &_npfixedcomp2_dnpnormc, 5},
    {"_npfixedcomp2_dnormcarray_", (DL_FUNC) &_npfixedcomp2_dnormcarray_, 4},
    {"_npfixedcomp2_dnpt", (DL_FUNC) &_npfixedcomp2_dnpt, 5},
    {"_npfixedcomp2_dtarray_", (DL_FUNC) &_npfixedcomp2_dtarray_, 4},
    {"_npfixedcomp2_dnpdiscnorm", (DL_FUNC) &_npfixedcomp2_dnpdiscnorm, 6},
    {"_npfixedcomp2_ddiscnormarray_", (DL_FUNC) &_npfixedcomp2_ddiscnormarray_, 5},
    {"_npfixedcomp2_pnpdiscnorm", (DL_FUNC) &_npfixedcomp2_pnpdiscnorm, 7},
    {"_npfixedcomp2_pdiscnormarray_", (DL_FUNC) &_npfixedcomp2_pdiscnormarray_, 6},
    {"_npfixedcomp2_dnppois", (DL_FUNC) &_npfixedcomp2_dnppois, 5},
    {"_npfixedcomp2_dpoisarray_", (DL_FUNC) &_npfixedcomp2_dpoisarray_, 4},
    {"_npfixedcomp2_pnppois", (DL_FUNC) &_npfixedcomp2_pnppois, 6},
    {"_npfixedcomp2_ppoisarray_", (DL_FUNC) &_npfixedcomp2_ppoisarray_, 5},
    {"_npfixedcomp2_log1mexp_", (DL_FUNC) &_npfixedcomp2_log1mexp_, 1},
    {"_npfixedcomp2_logspaceadd_", (DL_FUNC) &_npfixedcomp2_logspaceadd_, 2},
    {"_npfixedcomp2_npnormad_", (DL_FUNC) &_npfixedcomp2_npnormad_, 10},
    {"_npfixedcomp2_estpi0npnormad_", (DL_FUNC) &_npfixedcomp2_estpi0npnormad_, 8},
    {"_npfixedcomp2_gfnpnormad", (DL_FUNC) &_npfixedcomp2_gfnpnormad, 7},
    {"_npfixedcomp2_npnormadw_", (DL_FUNC) &_npfixedcomp2_npnormadw_, 12},
    {"_npfixedcomp2_estpi0npnormadw_", (DL_FUNC) &_npfixedcomp2_estpi0npnormadw_, 10},
    {"_npfixedcomp2_npnormcll_", (DL_FUNC) &_npfixedcomp2_npnormcll_, 10},
    {"_npfixedcomp2_estpi0npnormcll_", (DL_FUNC) &_npfixedcomp2_estpi0npnormcll_, 8},
    {"_npfixedcomp2_npnormcvm_", (DL_FUNC) &_npfixedcomp2_npnormcvm_, 10},
    {"_npfixedcomp2_estpi0npnormcvm_", (DL_FUNC) &_npfixedcomp2_estpi0npnormcvm_, 8},
    {"_npfixedcomp2_gfnpnormcvm", (DL_FUNC) &_npfixedcomp2_gfnpnormcvm, 7},
    {"_npfixedcomp2_npnormcvmw_", (DL_FUNC) &_npfixedcomp2_npnormcvmw_, 12},
    {"_npfixedcomp2_estpi0npnormcvmw_", (DL_FUNC) &_npfixedcomp2_estpi0npnormcvmw_, 10},
    {"_npfixedcomp2_npnormll_", (DL_FUNC) &_npfixedcomp2_npnormll_, 10},
    {"_npfixedcomp2_estpi0npnormll_", (DL_FUNC) &_npfixedcomp2_estpi0npnormll_, 8},
    {"_npfixedcomp2_npnormllw_", (DL_FUNC) &_npfixedcomp2_npnormllw_, 12},
    {"_npfixedcomp2_estpi0npnormllw_", (DL_FUNC) &_npfixedcomp2_estpi0npnormllw_, 10},
    {"_npfixedcomp2_nppoisll_", (DL_FUNC) &_npfixedcomp2_nppoisll_, 11},
    {"_npfixedcomp2_estpi0nppoisll_", (DL_FUNC) &_npfixedcomp2_estpi0nppoisll_, 9},
    {"_npfixedcomp2_nptll_", (DL_FUNC) &_npfixedcomp2_nptll_, 10},
    {"_npfixedcomp2_estpi0nptll_", (DL_FUNC) &_npfixedcomp2_estpi0nptll_, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_npfixedcomp2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
