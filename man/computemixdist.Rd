% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/npfixedcomp2.R
\name{computemixdist}
\alias{computemixdist}
\alias{computemixdist.npnormll}
\alias{computemixdist.npnormcvm}
\alias{computemixdist.npnormad}
\alias{computemixdist.npnormcll}
\alias{computemixdist.nptll}
\alias{computemixdist.npnormllw}
\alias{computemixdist.npnormcvmw}
\alias{computemixdist.npnormadw}
\title{Computing non-parametric mixing distribution}
\usage{
computemixdist(v, method = "npnormll", ...)

computemixdist.npnormll(
  v,
  mu0,
  pi0,
  beta,
  order,
  mix = NULL,
  gridpoints = NULL,
  ...
)

computemixdist.npnormcvm(
  v,
  mu0,
  pi0,
  beta,
  order,
  mix = NULL,
  gridpoints = NULL,
  ...
)

computemixdist.npnormad(
  v,
  mu0,
  pi0,
  beta,
  order,
  mix = NULL,
  gridpoints = NULL,
  ...
)

computemixdist.npnormcll(
  v,
  mu0,
  pi0,
  beta,
  order,
  mix = NULL,
  gridpoints = NULL,
  ...
)

computemixdist.nptll(
  v,
  mu0,
  pi0,
  beta,
  order,
  mix = NULL,
  gridpoints = NULL,
  ...
)

computemixdist.npnormllw(
  v,
  mu0,
  pi0,
  beta,
  order,
  mix = NULL,
  gridpoints = NULL,
  ...
)

computemixdist.npnormcvmw(
  v,
  mu0,
  pi0,
  beta,
  order,
  mix = NULL,
  gridpoints = NULL,
  ...
)

computemixdist.npnormadw(
  v,
  mu0,
  pi0,
  beta,
  order,
  mix = NULL,
  gridpoints = NULL,
  ...
)
}
\arguments{
\item{v}{a vector of observations}

\item{method}{An implemented family; see details}

\item{...}{parameters above passed to the specific method}

\item{mu0}{A vector of support points}

\item{pi0}{A vector of weights corresponding to the support points}

\item{beta}{structual parameter.}

\item{order}{the parameter for the binned version.}

\item{mix}{initial mixing distribution.}

\item{gridpoints}{a vector of gridpoints to evaluate new support points}
}
\description{
Computing non-parametric mixing distribution
}
\details{
These functions are used to make the object for computing the non-paramtric mixing
distribution or estimating the proportion of zero using non-parametric methods.

This is a generic function for making the object for computing the non-parametric
mixing distribution or estimating the proportion of zero.

current implemented families are:
\itemize{
\item npnormll : normal density using maximum likelihood (Chapter 3). The default beta is 1.
\item npnormllw : Binned version of normal density using maximum likelihood (Chapter 6).
The default beta is 1 and the default order is -3.
\item npnormcvm : normal density using the Cramer-von Mises distance (Chapter 5). The default beta is 1.
\item npnormcvmw : Binned version of normal density using the Cramer-von Mises distance (Chapter 6).
The default beta is 1 and the default order is -3.
\item npnormad : normal density using the Anderson-Darling distance (Chapter 5). The default beta is 1.
\item npnormadw : Binned version of normal density using the Anderson-Darling distance (Chapter 6)
The default beta is 1 and the default order is -3.
\item nptll : t-density using maximum likelihood (Chapter 3). The default beta is infinity (normal distribution).
\item npnormcll : the one-parameter normal distribution used for approximating the sample
correlation coefficients using maximum likelihood. This does not have a
corresponding estimation of zero due to incompleted theory (Chapter 8).
There is no default beta. The structure beta is the number of observations.
}

The default method used is npnormll.
}
\examples{
set.seed(123)
pi0 = 0
data = rnorm(1000, mean = c(0, 2))
system.time(r <- computemixdist(data, pi0 = pi0, method = "npnormll"))
r
system.time(r <- computemixdist(data, pi0 = pi0, method = "npnormcvm"))
r
system.time(r <- computemixdist(data, pi0 = pi0, method = "nptll"))
r
system.time(r <- computemixdist(data, pi0 = pi0, method = "npnormad"))
r
system.time(r <- computemixdist(tanh(data), pi0 = pi0, method = "npnormcll", beta = 4))
r
system.time(r <- computemixdist(data, pi0 = pi0, method = "npnormllw", order = -2))
r
system.time(r <- computemixdist(data, pi0 = pi0, method = "npnormcvmw", order = -2))
r
system.time(r <- computemixdist(data, pi0 = pi0, method = "npnormadw", order = -2))
r
system.time(r <- nspmix::cnm(nspmix::npnorm(data)))
r
}
